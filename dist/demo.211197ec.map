{"version":3,"sources":["demo.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"demo.211197ec.map","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    \r\n\r\n    //增\r\n        create(string) {\r\n        /*\r\n            1.输入create(\"<div><span>你好<span></div>\")自动创建好div和span\r\n            2.实现思路是把字符串写进InnerHTML\r\n            3.用template，可以容纳所有标签\r\n            4.比如div里不能直接放<tr></tr>\r\n            5.template可以直接放\r\n        */\r\n            const container = document.createElement(\"template\");\r\n            container.innerHTML = string.trim();  //去掉多余空格，也可以写成String.prototype.trim.call(string);\r\n            return container.content.firstChild;\r\n        },\r\n        after(node, node2) {\r\n        /*\r\n            1.在node后面接上node2\r\n            2.但DOM只提供了insertBefore接口（在接口前插入新接口）\r\n            3.所以在1后面插入3，等于在2前面插入3\r\n            4.也就是在node的下一节点前插入node2\r\n            5.即使node已经是最后一个节点，即node.nextSibling取值为空也可以插入\r\n         */\r\n            node.parentNode.insertBefore(node2, node.nextSibling);\r\n        },\r\n        before(node, node2){\r\n            node.parentNode.insertBefore(node2, node);\r\n        },\r\n        append(parent, node){\r\n        //新加一个node节点作为子节点\r\n            parent.appendChild(node)\r\n        },\r\n        wrap(node, parent){\r\n        /*\r\n            1.把新的父节点parent插入到node前\r\n            2.再把node节点作为子节点合并到新的parent节点里\r\n        */\r\n            dom.before(node, parent);\r\n            dom.append(parent,node);\r\n        },\r\n    \r\n    \r\n    //删\r\n        remove(node){\r\n            node.parentNode.removeChild(node)\r\n            return node;\r\n        },\r\n        empty(node){\r\n        /*删除后代\r\n            1.新语法const {childNodes} = node等于const childNodes = node.childNodes\r\n            2.childNodes长度在每次移除后代时会发生变化\r\n            3.用下面移除方式时会同时移除文本节点（例如html里面的回车），所以返回时保证完整性要获取到文本节点\r\n        */\r\n            const array = []\r\n            let x = node.firstChild\r\n            while(x){\r\n                array.push(dom.remove(node.firstChild))\r\n                x = node.firstChild\r\n            }\r\n            return array\r\n        },\r\n    \r\n    \r\n    //改\r\n        attr(node, name, value){\r\n        /*\r\n            1.重载：根据参数个数的写不同的代码\r\n            2.三个参数时改，两个参数时查\r\n        */\r\n            if(arguments.length === 3){\r\n                node.setAttribute(name, value)\r\n            }else if(arguments.length === 2){\r\n                return node.getAttribute(name, value)\r\n            }\r\n        },\r\n        text(node, string){\r\n        /*\r\n            1.适配不同浏览器\r\n            2.innerText => Ie\r\n            3.textContent => Firefox\r\n        */\r\n            if(arguments.length === 2){\r\n                if('innerText' in node){\r\n                    node.innerText = string\r\n                }else{\r\n                    node.textContent = string\r\n                }\r\n            }else if(arguments.length === 1){\r\n                if('innerText' in node){\r\n                    return node.innerText\r\n                }else{\r\n                    return node.textContent\r\n                }\r\n            }\r\n        },\r\n        html(node, string){\r\n            if(arguments.length === 2){\r\n                node.innerHTML = string\r\n            }else if(arguments.length === 1){\r\n                return node.innerHTML\r\n            }\r\n        },\r\n        style(node, name, value){\r\n        /*  \r\n            1.dom.style(div, 'color', 'red')\r\n            2.dom.style(div, 'color')\r\n            3.dom.style(div, {color: 'red'})\r\n        */\r\n            if(arguments.length === 3){\r\n                node.style[name] = value\r\n            }else if(arguments.length === 2){\r\n                if(typeof name === 'string'){\r\n                    return node.style[name]\r\n                }else if(name instanceof Object){\r\n                    const object = name\r\n                    for(let key in object){\r\n                        node.style[key] = object[key]\r\n                    }\r\n                }\r\n            } \r\n        },\r\n        class: {\r\n        //添加、删除和查看class\r\n            add(node, className){\r\n                node.classList.add(className)\r\n            },\r\n            remove(node, className){\r\n                node.classList.remove(className)\r\n            },\r\n            has(node, className){\r\n                return node.classList.contains(className)\r\n            }\r\n        },\r\n        on(node, eventName, fn){\r\n        //添加事件\r\n            node.addEventListener(eventName, fn)\r\n        },\r\n        off(node, eventName, fn){\r\n        //删除事件\r\n            node.removeEventListener(eventName, fn)\r\n        },\r\n    \r\n    \r\n    //查\r\n        find(selector, scope){\r\n        //dom.find('选择器',范围)用于获取标签\r\n            return (scope || document).querySelectorAll(selector)\r\n        },\r\n        parent(node){\r\n            return node.parent\r\n        },\r\n        children(node){\r\n            return node.children\r\n        },\r\n        siblings(node){\r\n        /*\r\n            1.获取兄弟姐妹元素\r\n            2.将父元素中所有子元素的伪数组转换为真数组\r\n            3.用filter过滤node来确定兄弟姐妹元素\r\n        */ \r\n            return Array.from(node.parentNode.children).filter(n=>n!==node)\r\n        },\r\n        next(node){\r\n        //获取弟弟\r\n            let x = node.nextSibling\r\n            while(x && x.nodeType === 3){\r\n                x = x.nextSibling\r\n            }\r\n            return x\r\n        },\r\n        previous(node){\r\n        //获取哥哥\r\n            let x = node.previousSibling\r\n            while(x && x.nodeType === 3){\r\n                x = x.previousSibling\r\n            }\r\n            return x\r\n        },\r\n        each(nodeList, fn){\r\n        //用于遍历所有节点\r\n            for(let i=0;i<nodeList.length;i++){\r\n                fn.call(null, nodeList[i])\r\n            }\r\n        },\r\n        index(node){\r\n        //获取排行第几，用数组下标显示\r\n            const list = dom.children(node.parentNode)\r\n            let i = 0\r\n            for(i;i<list.length;i++){\r\n                if(list[i] === node){\r\n                    break\r\n                }\r\n            }\r\n            return i\r\n        }\r\n    \r\n    };"]}